<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Str;
use Illuminate\Support\Facades\Storage;
use SimpleSoftwareIO\QrCode\Facades\QrCode;

class Bidang extends Model
{
    use HasFactory;

    protected $fillable = [
        'nama_bidang', 
        'kode_bidang',
        'qr_code_path',
        'has_qr_code'
    ];
    
    protected $casts = [
        'has_qr_code' => 'boolean'
    ];
    
    protected static function boot()
    {
        parent::boot();
        
        static::creating(function ($model) {
            // Generate kode bidang otomatis jika belum ada
            if (empty($model->kode_bidang)) {
                $model->kode_bidang = self::generateKodeBidang($model->nama_bidang);
            }
            
            // Generate slug
            $model->slug = Str::slug($model->nama_bidang);
        });
        
        static::created(function ($model) {
            // Generate QR Code setelah model tersimpan (karena butuh ID)
            self::generateQrCode($model);
        });
        
        static::updating(function ($model) {
            // Update slug jika nama berubah
            if ($model->isDirty('nama_bidang')) {
                $model->slug = Str::slug($model->nama_bidang);
                
                // Regenerate kode bidang jika nama berubah dan kode masih default
                if (self::isAutoGeneratedCode($model->getOriginal('kode_bidang'), $model->getOriginal('nama_bidang'))) {
                    $model->kode_bidang = self::generateKodeBidang($model->nama_bidang);
                }
            }
            
            // Generate ulang QR Code jika kode bidang berubah
            if ($model->isDirty('kode_bidang')) {
                self::generateQrCode($model);
            }
        });

        static::deleting(function ($model) {
            // Hapus file QR Code ketika data dihapus
            if ($model->qr_code_path) {
                $filePath = str_replace('storage/', '', $model->qr_code_path);
                Storage::disk('public')->delete($filePath);
            }
        });
    }

    /**
     * Generate kode bidang otomatis berdasarkan nama bidang
     */
    private static function generateKodeBidang($namaBidang)
    {
        // Bersihkan nama bidang dan ambil kata-kata utama
        $words = explode(' ', strtoupper(trim($namaBidang)));
        $code = '';
        
        // Ambil 2-3 huruf pertama dari setiap kata (maksimal 6 karakter)
        foreach ($words as $word) {
            if (strlen($code) >= 6) break;
            
            $cleanWord = preg_replace('/[^A-Z0-9]/', '', $word);
            if (strlen($cleanWord) > 0) {
                $code .= substr($cleanWord, 0, min(3, 6 - strlen($code)));
            }
        }
        
        // Jika kode terlalu pendek, tambahkan dari kata pertama
        if (strlen($code) < 3 && !empty($words[0])) {
            $firstWord = preg_replace('/[^A-Z0-9]/', '', $words[0]);
            $code = substr($firstWord, 0, min(6, strlen($firstWord)));
        }
        
        // Pastikan minimal 3 karakter
        if (strlen($code) < 3) {
            $code = strtoupper(substr(str_replace(' ', '', $namaBidang), 0, 3));
        }
        
        // Pastikan maksimal 6 karakter
        $baseCode = substr($code, 0, 6);
        
        // Cek apakah kode sudah ada, jika ya tambahkan angka
        $finalCode = $baseCode;
        $counter = 1;
        
        while (self::where('kode_bidang', $finalCode)->exists()) {
            $suffix = str_pad($counter, 2, '0', STR_PAD_LEFT);
            $finalCode = substr($baseCode, 0, 4) . $suffix;
            $counter++;
            
            // Hindari infinite loop
            if ($counter > 99) {
                $finalCode = $baseCode . rand(10, 99);
                break;
            }
        }
        
        return $finalCode;
    }
    
    /**
     * Cek apakah kode bidang adalah hasil auto generate
     */
    private static function isAutoGeneratedCode($oldCode, $oldName)
    {
        if (empty($oldCode) || empty($oldName)) {
            return false;
        }
        
        $generatedCode = self::generateKodeBidangBase($oldName);
        return strpos($oldCode, $generatedCode) === 0;
    }
    
    /**
     * Generate base code tanpa pengecekan uniqueness
     */
    private static function generateKodeBidangBase($namaBidang)
    {
        $words = explode(' ', strtoupper(trim($namaBidang)));
        $code = '';
        
        foreach ($words as $word) {
            if (strlen($code) >= 6) break;
            $cleanWord = preg_replace('/[^A-Z0-9]/', '', $word);
            if (strlen($cleanWord) > 0) {
                $code .= substr($cleanWord, 0, min(3, 6 - strlen($code)));
            }
        }
        
        if (strlen($code) < 3 && !empty($words[0])) {
            $firstWord = preg_replace('/[^A-Z0-9]/', '', $words[0]);
            $code = substr($firstWord, 0, min(6, strlen($firstWord)));
        }
        
        if (strlen($code) < 3) {
            $code = strtoupper(substr(str_replace(' ', '', $namaBidang), 0, 3));
        }
        
        return substr($code, 0, 6);
    }

    /**
     * Generate QR Code untuk bidang
     */
    private static function generateQrCode($model)
    {
        try {
            // Hapus QR code lama jika ada
            if ($model->qr_code_path) {
                $oldFilePath = str_replace('storage/', '', $model->qr_code_path);
                Storage::disk('public')->delete($oldFilePath);
            }
            
            // URL yang akan dituju ketika QR code di-scan
            $qrContent = route('bidang.assets', $model->kode_bidang);
            
            // Generate QR code sebagai SVG string
            $qrCodeSvg = QrCode::size(200)
                ->format('svg')
                ->generate($qrContent);
            
            // Simpan ke storage
            $fileName = 'qrcodes/bidang-' . $model->kode_bidang . '-' . time() . '.svg';
            Storage::disk('public')->put($fileName, $qrCodeSvg);
            
            // Update path ke database
            $model->qr_code_path = 'storage/' . $fileName;
            $model->has_qr_code = true;
            $model->saveQuietly(); // Gunakan saveQuietly untuk menghindari trigger event lagi
            
        } catch (\Exception $e) {
            \Log::error('Failed to generate QR Code for Bidang ' . $model->kode_bidang . ': ' . $e->getMessage());
        }
    }
    
    // Relationships
    public function assets()
    {
        return $this->hasMany(Asset::class);
    }

    public function users()
    {
        return $this->hasMany(User::class);
    }

    // Method untuk mendapatkan statistik aset
    public function getAssetStats()
    {
        return [
            'total' => $this->assets()->count(),
            'total_jumlah' => $this->assets()->sum('jumlah_aset'),
            'baik' => $this->assets()->where('kondisi', 'baik')->count(),
            'rusak_ringan' => $this->assets()->whereIn('kondisi', ['rusak', 'rusak_ringan'])->count(),
            'rusak_berat' => $this->assets()->whereIn('kondisi', ['perlu perbaikan', 'rusak_berat'])->count(),
        ];
    }
    
    // Accessor untuk mendapatkan QR Code URL
    public function getQrCodeUrlAttribute()
    {
        return $this->qr_code_path ? asset($this->qr_code_path) : null;
    }
    
    // Method untuk regenerate QR Code manual
    public function regenerateQrCode()
    {
        self::generateQrCode($this);
        return $this;
    }
}